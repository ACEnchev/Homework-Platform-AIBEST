// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication14.Data;

#nullable disable

namespace WebApplication14.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240721205855_Mig")]
    partial class Mig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WebApplication14.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AdministratorId"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdministratorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("administrators");
                });

            modelBuilder.Entity("WebApplication14.Models.Assignments", b =>
                {
                    b.Property<int>("AssignmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AssignmentsId"));

                    b.Property<int?>("ClassesId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Description")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("DueData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AssignmentsId");

                    b.HasIndex("ClassesId");

                    b.ToTable("assignments");
                });

            modelBuilder.Entity("WebApplication14.Models.Classes", b =>
                {
                    b.Property<int>("ClassesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClassesId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentCount")
                        .HasColumnType("int");

                    b.HasKey("ClassesId");

                    b.ToTable("classes");
                });

            modelBuilder.Entity("WebApplication14.Models.Grades", b =>
                {
                    b.Property<int>("GradesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GradesId"));

                    b.Property<double>("Grade")
                        .HasColumnType("double");

                    b.Property<string>("GradedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.HasKey("GradesId");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.ToTable("grades");
                });

            modelBuilder.Entity("WebApplication14.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("student");
                });

            modelBuilder.Entity("WebApplication14.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int>("AssignmentsId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .HasColumnType("longblob");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SubmissionId");

                    b.HasIndex("AssignmentsId");

                    b.HasIndex("StudentId");

                    b.ToTable("submission");
                });

            modelBuilder.Entity("WebApplication14.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("teachers");
                });

            modelBuilder.Entity("WebApplication14.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("ClassesId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("ClassesId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("WebApplication14.Models.Administrator", b =>
                {
                    b.HasOne("WebApplication14.Models.User", "user")
                        .WithOne("administrator")
                        .HasForeignKey("WebApplication14.Models.Administrator", "UserId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("WebApplication14.Models.Assignments", b =>
                {
                    b.HasOne("WebApplication14.Models.Classes", "classes")
                        .WithMany("assignments")
                        .HasForeignKey("ClassesId");

                    b.Navigation("classes");
                });

            modelBuilder.Entity("WebApplication14.Models.Grades", b =>
                {
                    b.HasOne("WebApplication14.Models.Submission", "submission")
                        .WithOne("Grades")
                        .HasForeignKey("WebApplication14.Models.Grades", "SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("submission");
                });

            modelBuilder.Entity("WebApplication14.Models.Student", b =>
                {
                    b.HasOne("WebApplication14.Models.User", "user")
                        .WithOne("student")
                        .HasForeignKey("WebApplication14.Models.Student", "UserId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("WebApplication14.Models.Submission", b =>
                {
                    b.HasOne("WebApplication14.Models.Assignments", "assignments")
                        .WithMany("submission")
                        .HasForeignKey("AssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication14.Models.Student", "student")
                        .WithMany("submission")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assignments");

                    b.Navigation("student");
                });

            modelBuilder.Entity("WebApplication14.Models.Teacher", b =>
                {
                    b.HasOne("WebApplication14.Models.User", "user")
                        .WithOne("teacher")
                        .HasForeignKey("WebApplication14.Models.Teacher", "UserId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("WebApplication14.Models.User", b =>
                {
                    b.HasOne("WebApplication14.Models.Classes", "classes")
                        .WithMany("users")
                        .HasForeignKey("ClassesId");

                    b.Navigation("classes");
                });

            modelBuilder.Entity("WebApplication14.Models.Assignments", b =>
                {
                    b.Navigation("submission");
                });

            modelBuilder.Entity("WebApplication14.Models.Classes", b =>
                {
                    b.Navigation("assignments");

                    b.Navigation("users");
                });

            modelBuilder.Entity("WebApplication14.Models.Student", b =>
                {
                    b.Navigation("submission");
                });

            modelBuilder.Entity("WebApplication14.Models.Submission", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("WebApplication14.Models.User", b =>
                {
                    b.Navigation("administrator");

                    b.Navigation("student");

                    b.Navigation("teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
